--------------------------------------------------------------------------
ADVANCED DEBUGGING, ANALYSIS, AND COMPILER OPTIONS
	• GCC Compiler Options (part 1)
	• GCC Compiler Options (part 2)
	• Debugging with the preprocessor
	• Debugging with gdb (part 1)
	• Debugging with gdb (part 2)
	• core files
	• Profiling
	• Static Analysis
	• valgrind tool
--------------------------------------------------------------------------

--------------------------------------------------------------------------
Profiling

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Recommendations for C Profilers?
https://stackoverflow.com/questions/1794816/recommendations-for-c-profilers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``````````````````````````````````````````````````
	==>
	GNU gprof
		Compiling a Program for Profiling
	http://web.archive.org/web/20141129061523/http://www.cs.utah.edu/dept/old/texinfo/as/gprof.html#SEC2
``````````````````````````````````````````````````

``````````````````````````````````````````````````
GNU gprof
``````````````````````````````````````````````````
o GNU gprof was written by Jay Fenlason

o used to determine which parts of a program are taking most of the execution time.
``````````````````````````````````````````````````

``````````````````````````````````````````````````
Why Profile
``````````````````````````````````````````````````

o Profiling allows you 
	to learn where your program spent its time and 
	which functions called which other functions 
	while it was executing.
	
o This information can show you 
	which pieces of your program are slower than you expected, 
	and might be candidates for rewriting to make your program execute faster.	
	
o It can also tell you which functions are being called more or less often than you expected.

o This may help you spot bugs that had otherwise been unnoticed.	
---
o Since the profiler uses information collected during the actual execution of your program, 
	it can be used on programs that are too large or too complex 
	to analyze by reading the source.
	
o However, 'how your program is run' will affect the information that shows up in the profile data.	

o If you don't use some feature of your program while it is being profiled, 
	no profile information will be generated for that feature.
---
Profiling has several steps:
	You must compile and link your program with profiling enabled. 
	See section "Compiling a Program for Profiling".
	
	You must execute your program to generate a profile data file. 
	See section "Executing the Program to Generate Profile Data".
	
	You must run gprof to analyze the profile data. 
	See section "gprof Command Summary".
``````````````````````````````````````````````````


``````````````````````````````````````````````````
Compiling a Program for Profiling
``````````````````````````````````````````````````
o To compile a source file for profiling, 
	specify the `-pg' option when you run the compiler.
	
o The same option, `-pg', alters either 
	
	compilation or 
	linking 
	
	to do what is necessary for profiling.	
	
	
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cc -g -c myprog.c utils.c -pg
cc -o myprog myprog.o utils.o -pg
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The `-pg' option also works with a command that both compiles and links:

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cc -o myprog myprog.c utils.c -g -pg	
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you run the linker ld directly instead of through a compiler such as cc, 
	you must specify the profiling startup file `/lib/gcrt0.o' 
	as the first input file instead of the usual startup file `/lib/crt0.o'.
	
In addition, you would probably want to specify the profiling C library, 
	`/usr/lib/libc_p.a', 
	by writing `-lc_p' instead of the usual `-lc'.	
	
This is not absolutely necessary, 
	but doing this gives you number-of-calls information for standard library functions 
	such as read and open. 

For example:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ld -o myprog /lib/gcrt0.o myprog.o utils.o -lc_p	
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

o If you compile only some of the modules of the program with `-pg', 
	you can still profile the program, 
	but you won't get complete information 
	about the modules that were compiled without `-pg'. 
	
o The only information you get for the functions in those modules is the total time spent in them; 
	there is no record of how many times they were called, or from where. 
	
o This will not affect the flat profile 
	(except that the calls field for the functions will be blank), 
	but will greatly reduce the usefulness of the call graph.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--------------------------------------------------------------------------