Exception has to throw for the vector at() function 
it should not trhow for the vector [] operator 
but visual studio overridded the behavious agains the C++ standard *********


what is exception?
why exception is thrown?
    o to throw exception to signal certain error condition
    
what is exception handler?
    o mechanism by which we will handle the thrown exception 
    step 1:
        try the exception               : via try block 
    setp 2: 
        catch the respective exception  : via catch block 

syntax:
try{
	//code may throw the exception
}catch(out_of_range& ex){
	//code to handle the exception 
}
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;

int main()
{
	//int ages[] = { 12,13,22,37,43 };
	//cout << ages[2] << endl;
	//cout << ages[5] << endl;

	vector<int> ages = { 12, 13, 22, 37, 43 };
	//cout << ages[2] << endl;
	//cout << ages[5] << endl;
	cout << ages.at(2) << endl;
	cout << ages.at(5) << endl;

	return 0;
}
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;

int main()
{
    vector<int> ages = { 12, 13, 22, 37, 43 };
	int index,count=0;
	while(count<2){
	    cout << "Enter the index of the age:"; cin >> index;
	    try{
	        cout << ages.at(index) << endl;
	    }catch(out_of_range& ex){
	        cout << "Give the right index. Index is not at all there." << endl;
	    }
	    count++;
	}

    cout << "Continuing...." << endl;
	return 0;
}
----------------------------------------------------------
throw example
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;
class Division {
private:
	int firstNumber;
	int secondNumber;
public:
	Division(int firstNumber, int secondNumber) :firstNumber(firstNumber), secondNumber(secondNumber) {

	}
	int findQuotient() {
		if (secondNumber == 0) {
			throw "Error";
		}
		int quotient = firstNumber / secondNumber;
		return quotient;
	}
};
int main()
{
	int count = 0;
	while (count < 2) {
		int firstNumber;
		int secondNumber;
		int quotient = 0;
		cout << "First Number:"; cin >> firstNumber;
		cout << "Second Number:"; cin >> secondNumber;
		Division division(firstNumber, secondNumber);
		try {
			quotient = division.findQuotient();
		}
		catch (const char* ex) {
			cout << "Error in Division. Division by Zero" << endl;
		}
		cout << "Quotient is " << quotient << endl;
		count++;
	}
	cout << "Continuing...." << endl;
	return 0;
}
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
#include<exception>
using namespace std;

class DivisionException : public exception {
	virtual const char* what() const throw()
	{
		return "Division by zero.";
	}
};

class Division {
private:
	int firstNumber;
	int secondNumber;
public:
	Division(int firstNumber, int secondNumber) :firstNumber(firstNumber), secondNumber(secondNumber) {

	}
	int findQuotient() {
		if (secondNumber == 0) {
			if (firstNumber % 2 == 0)
				throw 10;
			else if (firstNumber % 3 == 0) {
				DivisionException divideException;
				throw divideException;
			}
			else if (firstNumber % 5 == 0)
				throw "Error in finding quotient";
			else if (firstNumber % 7 == 0)
				throw 1.2f;
			else
				throw 12L;
		}
		int quotient = firstNumber / secondNumber;
		return quotient;
	}
};
int main()
{
	int count = 0;
	while (count < 6) {
		int firstNumber;
		int secondNumber;
		int quotient = 0;
		cout << "First Number:"; cin >> firstNumber;
		cout << "Second Number:"; cin >> secondNumber;
		Division division(firstNumber, secondNumber);
		try {
			quotient = division.findQuotient();
		}
		catch (const char* ex) {
			cout << "(const char*)Division by Zero" << endl;
		}
		catch (int ex) {
			cout << "(int)Division by Zero" << endl;
		}
		catch (float ex) {
			cout << "(float)Division by Zero" << endl;
		}
		catch (DivisionException & ex) {
			cout << "(DivisionException)Division by Zero" << endl;
		}
		catch (...) {//default exception handler
			cout << "(all other)Division by Zero" << endl;
		}
		cout << "Quotient is " << quotient << endl;
		count++;
	}
	cout << "Continuing...." << endl;
	return 0;
}
----------------------------------------------------------