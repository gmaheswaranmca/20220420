1. to define user-defined exception ie user defined exception class 
    class UserDefinedExceptionName : public exception {
        public :
            virtual const char* what() const throw(){
                return "Text for Exception";
            }
    };
2. how to use the exception object 
    throw exception_object;
3. how to handle the exception 
    try{
        //CODE may throw the exception "UserDefinedExceptionName"
    }catch(UserDefinedExceptionName& ex){
        //EXCEPTION HANDLING CODE 
        cout << "our own messages." << ex.what() << endl;
        //EXCEPTION HANDLING CODE 
    }

Exception has to throw for the vector at() function 
it should not trhow for the vector [] operator 
but visual studio overridded the behavious agains the C++ standard *********


what is exception?
why exception is thrown?
    o to throw exception to signal certain error condition
    
what is exception handler?
    o mechanism by which we will handle the thrown exception 
    step 1:
        try the exception               : via try block 
    setp 2: 
        catch the respective exception  : via catch block 

syntax:
try{
	//code may throw the exception
}catch(out_of_range& ex){
	//code to handle the exception 
}
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;

int main()
{
	//int ages[] = { 12,13,22,37,43 };
	//cout << ages[2] << endl;
	//cout << ages[5] << endl;

	vector<int> ages = { 12, 13, 22, 37, 43 };
	//cout << ages[2] << endl;
	//cout << ages[5] << endl;
	cout << ages.at(2) << endl;
	cout << ages.at(5) << endl;

	return 0;
}
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;

int main()
{
    vector<int> ages = { 12, 13, 22, 37, 43 };
	int index,count=0;
	while(count<2){
	    cout << "Enter the index of the age:"; cin >> index;
	    try{
	        cout << ages.at(index) << endl;
	    }catch(out_of_range& ex){
	        cout << "Give the right index. Index is not at all there." << endl;
	    }
	    count++;
	}

    cout << "Continuing...." << endl;
	return 0;
}
----------------------------------------------------------
throw example
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
using namespace std;
class Division {
private:
	int firstNumber;
	int secondNumber;
public:
	Division(int firstNumber, int secondNumber) :firstNumber(firstNumber), secondNumber(secondNumber) {

	}
	int findQuotient() {
		if (secondNumber == 0) {
			throw "Error";
		}
		int quotient = firstNumber / secondNumber;
		return quotient;
	}
};
int main()
{
	int count = 0;
	while (count < 2) {
		int firstNumber;
		int secondNumber;
		int quotient = 0;
		cout << "First Number:"; cin >> firstNumber;
		cout << "Second Number:"; cin >> secondNumber;
		Division division(firstNumber, secondNumber);
		try {
			quotient = division.findQuotient();
		}
		catch (const char* ex) {
			cout << "Error in Division. Division by Zero" << endl;
		}
		cout << "Quotient is " << quotient << endl;
		count++;
	}
	cout << "Continuing...." << endl;
	return 0;
}
----------------------------------------------------------
multiple exceptions
----------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
#include<exception>
using namespace std;

class DivisionException : public exception {
	virtual const char* what() const throw()
	{
		return "Division by zero.";
	}
};

class Division {
private:
	int firstNumber;
	int secondNumber;
public:
	Division(int firstNumber, int secondNumber) :firstNumber(firstNumber), secondNumber(secondNumber) {
        if (secondNumber == 0) {
			if (firstNumber % 11 == 0){
                DivisionException divideException;
				throw divideException;
            }
        }
	}
	int findQuotient() {
		if (secondNumber == 0) {
			if (firstNumber % 2 == 0)
				throw 10;
			else if (firstNumber % 3 == 0) {
				DivisionException divideException;
				throw divideException;
			}
			else if (firstNumber % 5 == 0)
				throw "Error in finding quotient";
			else if (firstNumber % 7 == 0)
				throw 1.2f;
			else
				throw 12L;
		}
		int quotient = firstNumber / secondNumber;
		return quotient;
	}
};
int main()
{
	int count = 0;
	while (count < 6) {
		int firstNumber;
		int secondNumber;
		int quotient = 0;
		cout << "First Number:"; cin >> firstNumber;
		cout << "Second Number:"; cin >> secondNumber;
        try{
            Division division(firstNumber, secondNumber);
            try {
                quotient = division.findQuotient();
            }
            catch (const char* ex) {
                cout << "(const char*)Division by Zero" << endl;
            }
            catch (int ex) {
                cout << "(int)Division by Zero" << endl;
            }
            catch (float ex) {
                cout << "(float)Division by Zero" << endl;
            }
            catch (DivisionException & ex) {
                cout << "(DivisionException)Division by Zero" << endl;
            }
            catch (...) {//default exception handler
                cout << "(all other)Division by Zero" << endl;
            }
        }catch(DivisionException & ex) {
                cout << "(DivisionException by constructor)Division by Zero" << endl;
        }
        
		cout << "Quotient is " << quotient << endl;
		count++;
	}
	cout << "Continuing...." << endl;
	return 0;
}
----------------------------------------------------------
Test Case:
----------------------------------------------------------
First Number:2
Second Number:0
(int)Division by Zero
Quotient is 0
First Number:3
Second Number:0
(DivisionException)Division by Zero
Quotient is 0
First Number:5
Second Number:0
(const char*)Division by Zero
Quotient is 0
First Number:7
Second Number:0
(float)Division by Zero
Quotient is 0
First Number:11
Second Number:0
(DivisionException by constructor)Division by Zero
Quotient is 0
First Number:13
Second Number:0
(all other)Division by Zero
Quotient is 0
Continuing....
----------------------------------------------------------
#define MAX_SIZE 3
#include<iostream>
#include<string>
#include<exception>
using namespace std;

class StackIsFullException :public exception {
public:
	virtual const char* what() const throw() {
		return "Stack Is Full.";
	}
};
class StackIsEmptyException :public exception {
public:
	virtual const char* what() const throw() {
		return "Stack Is Empty.";
	}
};

class MyStack {
private:
	string names[MAX_SIZE];
	int top;
public:
	MyStack();
	void push(string name);
	string pop();
	bool isEmpty();
	bool isFull();
};

// Define constructor 
MyStack::MyStack() {
	this->top = -1;
}

// Define push function
void MyStack::push(string name) {
	if (this->isFull()) {
		//cout << "STACK is full." << endl;
		StackIsFullException stkex;
		throw stkex;
		return;
	}

	this->top = this->top + 1;
	names[this->top] = name;
}

// Define pull function
string MyStack::pop() {
	if (this->isEmpty()) {
		StackIsEmptyException stkex;
		//cout << "STACK is empty." << endl;
		throw stkex;
		return "";//no-space empty string
	}
	string name = names[this->top];
	this->top = this->top - 1;
	return name;
}

bool MyStack::isEmpty() {
	return this->top == -1;
}

bool MyStack::isFull() {
	return this->top == (MAX_SIZE - 1);
}

int main() {
	int N;
	string names[MAX_SIZE];
	MyStack mystack;

	cout << "Enter number of names:"; cin >> N;

	for (int I = 0; I < N; I++) {
		cout << "Enter name:"; cin >> names[I];
	}

	for (int I = 0; I < N; I++) {
		//call "push" function of "mystack" to add each name of "names" array into "mystack"
		mystack.push(names[I]);
	}
	try {
		mystack.push(names[N - 1]);
	}
	catch (StackIsFullException & ex) {
		cout << "I got stack full error." << ex.what() << endl;
	}


	cout << endl << endl << "Names from stack (LIFO) structure:" << endl;
	while (!mystack.isEmpty()) {
		string name = mystack.pop();/* call "pop" function to read each char from "mystack" */
		cout << name << endl;
	}
	try{
		mystack.pop();
	}
	catch (StackIsEmptyException & ex) {
		cout << "I got stack empty error." << ex.what() << endl;
	}
	return 0;
}
----------------------------------------------------------
Test Case:
----------------------------------------------------------
Enter number of names:3
Enter name:dhoni
Enter name:virat
Enter name:rohit
I got stack full error.Stack Is Full.


Names from stack (LIFO) structure:
rohit
virat
dhoni
I got stack empty error.Stack Is Empty.
----------------------------------------------------------

