operator overloading:
-----------------------------------------
	Refer the cpp documentation to go with the updates
-----------------------------------------
operator overloading:
	giving new meaning to the operator with respect to business/user object
	
ways for operator overloading:	
1. member operator overloading
2. non-member/friend operator overloading

operators we can overload 
	binary operators 
		arithmetic operators: + - * / %
		bitwise: & | 
	unary operators:
		unary +, unary -, unary ~
		pre increment/decrement 
		post increment/decrement 
		logical NOT !
	assignment operators:
		= 
		+= -= *= /= %= &= |=
	relational operators:
		< 	>   <=   >= == !=
	logical operators:
		&& ||  
	input / output stream operators:   >>	<<
-----------------------------------------
Mathematical objects
	we can apply the operators to get overloaded 
Rule: Dont apply operators overloading for the business objects 	
-----------------------------------------
Complex		a+ib
Fraction	a/b			Ratio
-----------------------------------------
#include<iostream>
using namespace std;
class Fraction{	//	a/b	
	private:
		int numerator;		//a 
		int denominator;	//b
	public:
		Fraction();			//0/1	right		0/0 wrong
		Fraction(int numerator, int denominator);
        Fraction operator+(const Fraction& second);    
        Fraction operator-(const Fraction& second);
        Fraction operator*(const Fraction& second);
        Fraction operator/(const Fraction& second);
        //Fraction operator%(const Fraction& second);
        Fraction operator+();    
        Fraction operator-();
        
        Fraction operator++();//pre 
        Fraction operator++(int);//post
        Fraction operator--();//pre 
        Fraction operator--(int);//post
        
        bool operator<(const Fraction& second);    
        bool operator>(const Fraction& second);    
        bool operator<=(const Fraction& second);    
        bool operator>=(const Fraction& second);    
        bool operator==(const Fraction& second);    
        bool operator!=(const Fraction& second);    
        
        Fraction operator=(Fraction& second);
        Fraction operator+=(Fraction& second);
        
        friend istream& opeartor>>(istream& input, Fraction& first);
        friend ostream& opeartor<<(ostream& output,const Fraction& first); //[2/3]
};
//define 
int main(){
    Fraction f1(1,4),f2(3,4),f3(1,2),f4(1,8);
    cout << f1 << f2 << f3 << f4 << endl;
    Fraction f5 = ((f1 + f2) - f3) * f4;
    Fraction f6 = ++f5;
    Fraction f7 = f5++;
    Fraction f8 = --f5;
    Fraction f9 = f5--;
    Fraction f10 = -f1;
    Fraction f11 = +f1;
    Fraction f12 = f1;
    f12 += f3;
    
    cout << f5 << f6 << f7 << f8 << f9 << f10 << f11 << f12 << endl;
    
    return EXIT_SUCCESS;
}

-----------------------------------------	
assume a and b are user objects for example Rational or ComplexNumber
we are working with same user objects 
binary + 
	UserObject operator+(UserObject&)	!!!member binary -
		a + b				!!!returns UserObject ieRational
		a.opearator+(b)		

unary -
	UserObject operator-()	!!!member unary -
	-a						!!!returns UserObject ieRational
	a.operator-()
	
binary <
	bool operator<(UserObject&)	!!!member binary <
	a < b						!!! returns bool 
	a.operator<(b)
	
assignment=
	void operator=(UserObject&)	!!!member binary  =
	a=b;						!!! returns void 
	a.operator=(b)
	
assignment+=
	void operator+=(UserObject&)	!!!member binary  +=
	a+=b;						!!! returns void 
	a.operator+=(b)	
-----------------------------------------    
Fraction (4,6)
4/6	=> 2/3

2 is gcd 

12/18		=> 2/3
6 is gcd 

lcm -> least common multiple
gcd -> greatest common divisor (synonymous:hcf -> highest common factor)
-----------------------------------------
f1(7, 4), f2(3, 2)
7/4 + 3/2   -> 

7      3        7 * 2    3 * 4       7 * 2  +  3 * 4
--  +  --   ==  ------ + -------  =  ---------------
4      2        4 * 2    2 * 4           4 * 2
---------------------------------
f1(1, 4), f2(3, 4), f3(1, 2), f4(1, 8)
(((1/4 + 3/4) - 1/2) * 1/8)


   1     3      1     1
((-- +  --) -  --) *  --
   4     4      2     8
      |
      |
    1*4+3*4
    -------
      16    
      
     16     1
     --  - --       
     16     2
     
        |
        |
      16*2 - 1*16
      -----------
         16*2      
         
         16   1        16
         -- * --    =  --- = 1/16
         32   8        256 
    
    
    
    
    
    
    
	