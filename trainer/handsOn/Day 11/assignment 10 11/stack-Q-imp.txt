10. Implement stack and queue.
11. Implement stack as queue and queue as stack.
----------------------------------------------------------------------------
    STACK : "LIFO" Data Structure
        
    Examples: biscuits in the biscuit packet
      arrangement of the books one above the other 
      
    number stack: 
        number array 
        top pointer 
        
        10 20 30 40 50
        0  1  2  3  4   
                    top
        10 20 30 40 50 push            
     -1 0  1  2  3  4   
                  top 
      60 STACK is full
      
        10  20  30  40 50 
     -1 0   1   2   3  4   
    top 
      pop() 50
      pop() 40
      pop() 30
      pop() 20 
      pop() 10
      pop() STACK is empty 
      
    QUEUE:  "FIFO" Data Structure 
      
    Examples: railway station ticket counter 
        movie theatre ticket counter 
        vehicles in the tollgate
----------------------------------------------------------------------------
Stack Implementation
----------------------------------------------------------------------------
#define MAX_SIZE 5
#include<iostream>
using namespace std;

class QGStack {
private:
	int numbers[MAX_SIZE];
	int top;
public:
	QGStack();
	void push(int data);
	int pop();
	void print();
};
QGStack::QGStack() {
	this->top = -1;
}
void QGStack::push(int data) {
	if (this->top == (MAX_SIZE - 1)) {
		cout << "STACK is full." << endl;
		return;
	}

	this->top = this->top + 1;
	numbers[this->top] = data;
}
int QGStack::pop() {
	if (this->top == -1) {
		cout << "STACK is empty." << endl;
		return -999;
	}
	int data = numbers[this->top];
	this->top = this->top - 1;
	return data;
}
void QGStack::print() {
	cout << endl << endl << "The numbers in the stack is(TOP to BOTTOM) " << endl;
	for (int I = this->top; I >= 0; I--) {
		cout << "\t" << this->numbers[I] << endl;
	}
}
int main() {


	QGStack stack;
	int menu,data;
	do {
		cout << "Choice(1-Push,2-Pop,3-Print):"; cin >> menu;
		switch (menu) {
		case 1:
			
			cout << "Enter data:"; cin >> data;
			stack.push(data);
			break;
		case 2:
			
			data = stack.pop();
			if (data != -999) {
				cout << "The LIFO data read is " << data << endl;
			}
			break;
		case 3:
			stack.print();
			break;
		}
	} while (1 <= menu && menu << 3);//1 <= menu <= 3   
	return EXIT_SUCCESS;
}
----------------------------------------------------------------------------